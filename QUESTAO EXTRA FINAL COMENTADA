package visao;

public class TesteCadastro {
    public static void main(String[] args) {
        controle.CadastroPessoas cp = new controle.CadastroPessoas();
        modelo.Cliente a = new modelo.Cliente("Amanda Lima", new modelo.Data(31, 7, 1987), 1320);
        modelo.Funcionario b = new modelo.Funcionario("Leticia Freire", new modelo.Data(10, 8, 2005), 2000);
        modelo.Gerente c = new modelo.Gerente("Kauan Soares", new modelo.Data(14, 4, 2005), 12000, "Financeiro");

        cp.cadastraPessoa(a);
        cp.cadastraPessoa(b);
        cp.cadastraPessoa(c);//cadastra as pessoas pelo metodo da classe CadastroPessoas

        cp.imprimeCadastro();//imprime as informações das pessoas cadastradas,usando o metodo criado na classe CadastroPessoas
    }
}


package controle;

public class CadastroPessoas {
    private int qtdAtual;
    private modelo.Pessoa[] pessoas;// variavel criada para armazenar as informações das pessoas cadastradas 

    public CadastroPessoas() {
        this.qtdAtual = 0;
        this.pessoas = new modelo.Pessoa[1024];
    }

    public void cadastraPessoa(modelo.Pessoa pess) {
        this.pessoas[qtdAtual++] = pess;//array responsavel por armazenar as informações das pessoas cadastradas
    }

    public void imprimeCadastro() {
        System.out.println("Cadastro:");
        for (int i = 0; i < qtdAtual; i++) {
            pessoas[i].imprimeDados();//função para imprimir os dados usando o metodo da classe Pessoa
        }
    }
}





package modelo;

public abstract class Pessoa {
    private String nome;
    private Data nascimento;

    public Pessoa(String nome, Data nascimento) {
        this.nome = nome;
        this.nascimento = nascimento;   //construtor
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public Data getNascimento() {
        return nascimento;
    }

    public void setNascimento(Data nascimento) {
        this.nascimento = nascimento;
    }

   


 public String imprimeDados() {
        return String.format("Nome: %s\nData de nascimento: %s", nome, nascimento);
    }//Método  para imprimir dados

public String imprimeDados() {
    return String.format("Nome: %s\nData de nascimento: %s", nome, nascimento);
}

    

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;// verifica se os objetos sendo comparados são a mesma instância. Se isso for verdadeiro, os objetos são iguais e o método retorna true.
        if (obj == null)
            return false;// o código verifica se o objeto sendo comparado  é nulo. Se for , os objetos não são iguais e o método retorna false.
        if (getClass() != obj.getClass())
            return false;// verifica se os objetos são da mesma classe. Se não forem, os objetos não são considerados iguais e o método retorna false.
        Pessoa other = (Pessoa) obj;
        if (nome == null) {
            if (other.nome != null)
                return false;
        } else if (!nome.equals(other.nome))
            return false;
        if (nascimento == null) {
            if (other.nascimento != null)
                return false;
        } else if (!nascimento.equals(other.nascimento))
            return false;/* compara os campos nome e nascimento. Se o nome/nascimento no objeto atual for nulo, ele verifica se o nome/nascimento no outro objeto é nulo. 
                         Se ambos não forem  nulos, ele verifica se os nomes/nascientos são iguais.*/
        return true;
    }
}



package modelo;

public class Cliente extends Pessoa {
    private int codigo;

    public Cliente(String nome, Data nascimento, int codigo) {
        super(nome, nascimento);
        this.codigo = codigo;
    }

    public int getCodigo() {
        return codigo;
    }

    public void setCodigo(int codigo) {
        this.codigo = codigo;
    }




@Override
public String imprimeDados() {
    return String.format("Cliente:" +
                         "\nNome: %s" +
                         "\nData de nascimento: %s" +
                         "\nCódigo: %d" +
                         "\n---------------------------------------------\n",
                         super.getNome(), super.getNascimento(), this.codigo);
}//Método para imprimir dados criado pela classe Pessoa porém modificado(por isso o Override)

    

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        Cliente other = (Cliente) obj;
        if (codigo != other.codigo)
            return false;
        return true;
    }//método de verificação equals criado pela classe Pessoa porém modificado(por isso o Override)
}


package modelo;

public class Funcionario extends Pessoa {
    private float salario;

    public Funcionario(String nome, Data nascimento, float salario) {
        super(nome, nascimento);
        this.salario = salario;
    }

    public float getSalario() {
        return salario;
    }

    public void setSalario(float salario) {
        this.salario = salario;
    }
    
    

@Override
public String imprimeDados() {
    return String.format("Funcionário:" +
                         "\nNome: %s" +
                         "\nData de nascimento: %s" +
                         "\nSalário: %.02f" +
                         "\n---------------------------------------------\n",
                         getNome(), getNascimento(), salario);
}

     




package modelo;

public class Gerente extends Funcionario {
    private String area;

    public Gerente(String nome, Data nascimento, float salario, String area) {
        super(nome, nascimento, salario);
        this.area = area;
    }

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    
    public float calcularImposto() {
        return super.getSalario() * 0.05f;
    }

    @Override
 public String imprimeDados() {
    return String.format("Gerente:" + 
                       "\nNome: %s" +
                       "\nData de nascimento: %s" +
                       "\nSalário: %.02f" + 
                       "\nImposto sobre salário: %.02f" +
                       "\nÁrea: %s" +
                       "\n---------------------------------------------\n",
                       super.getNome(), super.getNascimento(), super.getSalario(), this.calcularImposto(), this.area);
}


    

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        Gerente other = (Gerente) obj;
        if (area == null) {
            if (other.area != null)
                return false;
        } else if (!area.equals(other.area))
            return false;
        return true;
    }
}



package modelo;

public class Data {
  private int dia;
  private int mes;
  private int ano;

  public Data(int dia, int mes, int ano) {
    this.dia = dia;
    this.mes = mes;
    this.ano = ano;
  }

  public int getDia() {
    return dia;
  }

  public void setDia(int dia) {
    this.dia = dia;
  }

  public int getMes() {
    return mes;
  }

  public void setMes(int mes) {
    this.mes = mes;
  }

  public int getAno() {
    return ano;
  }

  public void setAno(int ano) {
    this.ano = ano;
  }

  @Override
  public String toString() {
    return String.format("%02d/%02d/%04d", dia, mes, ano);
  }//formata para obter o formato do dia,mes e ano

  

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Data other = (Data) obj;
    if (dia != other.dia)
      return false;
    if (mes != other.mes)
      return false;
    if (ano != other.ano)
      return false;
    return true;
  }
}
